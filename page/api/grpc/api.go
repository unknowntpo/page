package page

import (
	"context"
	"errors"
	"io"
	"log"

	"github.com/unknowntpo/page/domain"

	pkgerrors "github.com/unknowntpo/page/pkg/errors"

	connect "github.com/bufbuild/connect-go"
	// generated by protoc-gen-go
	// generated by protoc-gen-connect-go

	pb "github.com/unknowntpo/page/gen/proto/page"
)

func NewPageServer(uCase domain.PageUsecase) *pageServer {
	return &pageServer{useCase: uCase}
}

type pageServer struct {
	useCase domain.PageUsecase
}

func (s *pageServer) NewList(ctx context.Context, req *connect.Request[pb.NewListRequest]) (*connect.Response[pb.NewListResponse], error) {
	if err := s.useCase.NewList(ctx, req.Msg.UserID, domain.ListKey(req.Msg.ListKey)); err != nil {
		log.Println("failed on s.useCase.GetHead", err)
		return nil, connect.NewError(connect.CodeInternal, pkgerrors.New(pkgerrors.Internal, "something goes wrong"))
	}
	res := connect.NewResponse(&pb.NewListResponse{
		Status: "OK",
	})
	res.Header().Set("Page-Version", "v1")
	return res, nil
}

func (s *pageServer) GetHead(ctx context.Context, req *connect.Request[pb.GetHeadRequest]) (*connect.Response[pb.GetHeadResponse], error) {
	log.Println("Request headers: ", req.Header())
	pageKey, err := s.useCase.GetHead(ctx, domain.ListKey(req.Msg.ListKey))
	if err != nil {
		log.Println("failed on s.useCase.GetHead", err)
		return nil, connect.NewError(connect.CodeInternal, pkgerrors.New(pkgerrors.Internal, "something goes wrong"))
	}
	res := connect.NewResponse(&pb.GetHeadResponse{
		PageKey: string(pageKey),
	})
	res.Header().Set("Page-Version", "v1")
	return res, nil
}

func (s *pageServer) GetPage(ctx context.Context, stream *connect.BidiStream[pb.GetPageRequest, pb.GetPageResponse]) error {
	// 	GetPage(context.Context, *connect_go.BidiStream[page.PageKey, page.Page]) error

	return nil
}

func (s *pageServer) SetPage(ctx context.Context, stream *connect.BidiStream[pb.SetPageRequest, pb.SetPageResponse]) error {
	for {
		req, err := stream.Receive()
		if errors.Is(err, io.EOF) {
			break
		}
		p := domain.Page{}
		p.SetContent(req.PageContent)
		pageKey, err := s.useCase.SetPage(ctx, req.UserID, domain.ListKey(req.ListKey), p)
		if err != nil {
			// TODO: Which error should we handle ?
			return connect.NewError(connect.CodeAborted, nil)
		}
		res := connect.NewResponse(&pb.SetPageResponse{
			PageKey: string(pageKey),
		})
		res.Header().Set("Page-Version", "v1")
		if err := stream.Send(res.Msg); err != nil {
			// TODO: hwo to handle this error ?
			log.Println("failed on stream.Send", err)
			return connect.NewError(connect.CodeAborted, nil)
		}
	}
	return nil
}

// func (s *pageServer) GetHead(req *pb.GetHeadRequest, stream pb.PageService_GetHeadServer) error {
// 	// TODO: Implement the logic to get the head page key
// 	// For example:
// 	var listKey domain.ListKey
// 	pageKey, err := s.useCase.GetHead(context.Background(), listKey)
// 	if err != nil {
// 		return errors.Wrap(err, "failed on api.useCase.GetHead")
// 	}

// 	// Send the page key through the stream
// 	if err := stream.Send(&pb.PageKey{Key: string(pageKey)}); err != nil {
// 		return err
// 	}

// 	return nil
// }

// func (s *pageServer) GetPage(stream pb.PageService_GetPageServer) error {
// 	// Receive the page keys from the stream and send the corresponding pages
// 	for {
// 		pageKey, err := stream.Recv()
// 		if err == io.EOF {
// 			return nil
// 		}
// 		if err != nil {
// 			return err
// 		}

// 		log.Println("got pageKey: ", pageKey)

// 		// TODO: Implement the logic to get the page
// 		// For example:
// 		page := &pb.Page{
// 			Title:   "Page Title",
// 			Content: "Page Content",
// 		}

// 		// Send the page through the stream
// 		if err := stream.Send(page); err != nil {
// 			return err
// 		}
// 	}
// }

// func (s *pageServer) SetPage(stream pb.PageService_SetPageServer) error {
// 	// Receive the pages from the stream and set them
// 	for {
// 		pg, err := stream.Recv()
// 		if err == io.EOF {
// 			return nil
// 		}
// 		if err != nil {
// 			return err
// 		}

// 		// TODO: Implement the logic to set the page
// 		// For example:
// 		pageKey := "ABC"
// 		log.Printf("Setting page %s: %s", pageKey, pg.Content)

// 		// Send the page key through the stream
// 		if err := stream.SendAndClose(&pb.PageKey{Key: pageKey}); err != nil {
// 			return err
// 		}
// 	}
// }
