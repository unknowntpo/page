// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/page/page.proto

package pageconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	page "github.com/unknowntpo/page/gen/proto/page"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PageServiceName is the fully-qualified name of the PageService service.
	PageServiceName = "page.PageService"
)

// PageServiceClient is a client for the page.PageService service.
type PageServiceClient interface {
	GetHead(context.Context, *connect_go.Request[page.GetHeadRequest]) (*connect_go.Response[page.GetHeadResponse], error)
	GetPage(context.Context) *connect_go.BidiStreamForClient[page.GetPageRequest, page.GetPageResponse]
	SetPage(context.Context) *connect_go.BidiStreamForClient[page.SetPageRequest, page.SetPageResponse]
}

// NewPageServiceClient constructs a client for the page.PageService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pageServiceClient{
		getHead: connect_go.NewClient[page.GetHeadRequest, page.GetHeadResponse](
			httpClient,
			baseURL+"/page.PageService/GetHead",
			opts...,
		),
		getPage: connect_go.NewClient[page.GetPageRequest, page.GetPageResponse](
			httpClient,
			baseURL+"/page.PageService/GetPage",
			opts...,
		),
		setPage: connect_go.NewClient[page.SetPageRequest, page.SetPageResponse](
			httpClient,
			baseURL+"/page.PageService/SetPage",
			opts...,
		),
	}
}

// pageServiceClient implements PageServiceClient.
type pageServiceClient struct {
	getHead *connect_go.Client[page.GetHeadRequest, page.GetHeadResponse]
	getPage *connect_go.Client[page.GetPageRequest, page.GetPageResponse]
	setPage *connect_go.Client[page.SetPageRequest, page.SetPageResponse]
}

// GetHead calls page.PageService.GetHead.
func (c *pageServiceClient) GetHead(ctx context.Context, req *connect_go.Request[page.GetHeadRequest]) (*connect_go.Response[page.GetHeadResponse], error) {
	return c.getHead.CallUnary(ctx, req)
}

// GetPage calls page.PageService.GetPage.
func (c *pageServiceClient) GetPage(ctx context.Context) *connect_go.BidiStreamForClient[page.GetPageRequest, page.GetPageResponse] {
	return c.getPage.CallBidiStream(ctx)
}

// SetPage calls page.PageService.SetPage.
func (c *pageServiceClient) SetPage(ctx context.Context) *connect_go.BidiStreamForClient[page.SetPageRequest, page.SetPageResponse] {
	return c.setPage.CallBidiStream(ctx)
}

// PageServiceHandler is an implementation of the page.PageService service.
type PageServiceHandler interface {
	GetHead(context.Context, *connect_go.Request[page.GetHeadRequest]) (*connect_go.Response[page.GetHeadResponse], error)
	GetPage(context.Context, *connect_go.BidiStream[page.GetPageRequest, page.GetPageResponse]) error
	SetPage(context.Context, *connect_go.BidiStream[page.SetPageRequest, page.SetPageResponse]) error
}

// NewPageServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPageServiceHandler(svc PageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/page.PageService/GetHead", connect_go.NewUnaryHandler(
		"/page.PageService/GetHead",
		svc.GetHead,
		opts...,
	))
	mux.Handle("/page.PageService/GetPage", connect_go.NewBidiStreamHandler(
		"/page.PageService/GetPage",
		svc.GetPage,
		opts...,
	))
	mux.Handle("/page.PageService/SetPage", connect_go.NewBidiStreamHandler(
		"/page.PageService/SetPage",
		svc.SetPage,
		opts...,
	))
	return "/page.PageService/", mux
}

// UnimplementedPageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPageServiceHandler struct{}

func (UnimplementedPageServiceHandler) GetHead(context.Context, *connect_go.Request[page.GetHeadRequest]) (*connect_go.Response[page.GetHeadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("page.PageService.GetHead is not implemented"))
}

func (UnimplementedPageServiceHandler) GetPage(context.Context, *connect_go.BidiStream[page.GetPageRequest, page.GetPageResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("page.PageService.GetPage is not implemented"))
}

func (UnimplementedPageServiceHandler) SetPage(context.Context, *connect_go.BidiStream[page.SetPageRequest, page.SetPageResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("page.PageService.SetPage is not implemented"))
}
